heap : 완전이진트리(모든 부모가 2명의 자식을 갖는 트리)의 상태를 형성하는 저장 공간
heapify : 힙구조를 만드는 함수, heappush로 삽입하거나 heapify 함수를 호출하지 않으면 일반 배열로 저장됨
최대힙 : 최대값이 부모노드
최소힙 : 최소값이 부모노드
heapify는 O(n), heappush, heappop은 O(logN)


다익스트라 : 해당 정점에서부터 모든 정점까지 최단거리
쉬운버전과 어려운버전이 있고, 원리는 같음.
배열과 힙큐, 추가 배열 사용 여부의 차이

쉬운버전:
거리 배열 초기화, 그래프 무한으로 초기화
시작 정점에서 모든 간선 큐에 넣음
해당 정점까지 최단거리 배열에 갱신하며 간선 넣음
visited 체크하면 while 알아서 빠져나옴
target이 있으면 빠져나와야 시간손해나지않음

방문하지 않은 최소 정점을 매번 탐색해야하므로 시간이 더 걸림 O(V^2)

어려운버전:
최단거리를 cost에 더함, 한번 구했던 정점은 이미 최단거리이므로 visited처럼 사용
처음 정점부터 누적된 비용(dist)이 현재 위치의 가중치(distance[now])보다 크면 continue
비용 계산 변수(cost) = 누적된 비용(dist) + 간선의 가중치(i[1])
cost가 distance[i[0]](누적된 비용 + 간선의 가중치)보다 작을 경우 힙큐

heapq를 사용하면 O(ElogV)
