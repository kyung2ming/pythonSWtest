DFS+DP -> BFS는 재귀용법이 아니므로 DP 불가능

count 2차원 배열에 누적합. count는 끝점에서 시작점방향으로 누적된다 생각하면 편함

[[-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
[[0, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
[[0, 0, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
[[0, 0, 0, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
[[0, 0, 0, 0, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
[[0, 0, 0, 0, 0], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
[[0, 0, 0, 0, 0], [-1, -1, -1, -1, 0], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
[[0, 0, 0, 0, 0], [-1, -1, -1, 0, 0], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
[[0, 0, 0, 0, 0], [-1, -1, -1, 0, 0], [-1, -1, -1, 0, -1], [-1, -1, -1, -1, -1]]
[[0, 0, 0, 0, 0], [-1, -1, -1, 0, 0], [-1, -1, -1, 0, -1], [-1, -1, -1, 0, -1]]
[[0, 0, 0, 1, 1], [-1, -1, -1, 1, 1], [-1, -1, -1, 1, -1], [-1, -1, -1, 1, -1]]
[[2, 2, 2, 2, 1], [-1, -1, -1, 1, 1], [-1, -1, -1, 1, -1], [-1, -1, -1, 1, -1]]
[[2, 2, 2, 2, 1], [0, -1, -1, 1, 1], [-1, -1, -1, 1, -1], [-1, -1, -1, 1, -1]]
[[2, 2, 2, 2, 1], [0, -1, -1, 1, 1], [0, -1, -1, 1, -1], [-1, -1, -1, 1, -1]]
[[2, 2, 2, 2, 1], [0, -1, -1, 1, 1], [0, -1, -1, 1, -1], [0, -1, -1, 1, -1]]
[[2, 2, 2, 2, 1], [0, -1, -1, 1, 1], [0, -1, -1, 1, -1], [0, 0, -1, 1, -1]]
[[2, 2, 2, 2, 1], [0, -1, -1, 1, 1], [0, -1, -1, 1, -1], [0, 0, 0, 1, -1]]

DFS+DP 틀을 외우는 것이 중요

1. DFS 상단부
최초 완료 조건 return 1, 방문 했을 경우 return count(시간절약은 이 부분), 방문 처리
2. nx,ny 지점
nx,ny 방향으로 재귀하며 count배열에 누적합. 이때 count배열은 현재 위치를 가리킴에 주의
3. return 지점
count를 리턴함으로써 nx, ny 방향 재귀 누적합을 모두 리턴함